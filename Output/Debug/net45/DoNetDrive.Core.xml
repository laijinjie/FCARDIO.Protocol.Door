<?xml version="1.0"?>
<doc>
<assembly>
<name>
DoNetDrive.Core
</name>
</assembly>
<members>
<member name="T:DoNetDrive.Core.My.Resources.Resources">
<summary>
  一个强类型的资源类，用于查找本地化的字符串等。
</summary>
</member>
<member name="P:DoNetDrive.Core.My.Resources.Resources.ResourceManager">
<summary>
  返回此类使用的缓存的 ResourceManager 实例。
</summary>
</member>
<member name="P:DoNetDrive.Core.My.Resources.Resources.Culture">
<summary>
  重写当前线程的 CurrentUICulture 属性，对
  使用此强类型资源类的所有资源查找执行重写。
</summary>
</member>
<member name="T:DoNetDrive.Core.Command.AbstractCommand">
 <summary>
 命令类的基类，定义了一组基本命令逻辑
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand.CommandObjectTotal">
 <summary>
 命令计数器
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._Parameter">
 <summary>
 保存用于命令的各种参数
 包含了通道连接参数，对端身份信息,以及命令参数等数据
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._Result">
 <summary>
 用于存储命令完毕后的返回值
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._Connector">
 <summary>
 此命令所依附的通讯通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._Status">
 <summary>
 命令的当前工作状态
 </summary>
</member>
<member name="P:DoNetDrive.Core.Command.AbstractCommand.IsWaitExecute">
 <summary>
 是否正在等待执行
 </summary>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._EventArgs">
 <summary>
 包含一个命令事件对象
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._ProcessMax">
 <summary>
 最大进度数<br/>
 当有发生变化时，会触发 CommandProcessEvent() 事件
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._ProcessStep">
 <summary>
 当前进度<br/>
 当有发生变化时，会触发 CommandProcessEvent() 事件
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._SendDate">
 <summary>
 最近一次发送的时间
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._IsWaitResponse">
 <summary>
 命令是否需要等待回应
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._Packet">
 <summary>
 用于存储当前命令发送的包
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._Decompile">
 <summary>
 解析器，将收到的数据按包的规则拆包，以便命令类进行下一步业务处理
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._ReSendCount">
 <summary>
 命令重发次数
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractCommand._IsRelease">
 <summary>
 用于指示此命令是否已释放
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.#ctor(DoNetDrive.Core.Command.INCommandDetail,DoNetDrive.Core.Command.INCommandParameter)">
 <summary>
 初始化两个重要参数，并进行参数检查
 </summary>
 <param name="cd">表示命令详情，包含通道信息，对端信息，超时时间，重发次数</param>
 <param name="par">表示此命令逻辑所需要的命令参数</param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.IsRelease">
 <summary>
 检测命令是否已释放
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.AbstractCommand.Parameter">
 <summary>
 命令逻辑所需要的命令参数
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.AbstractCommand.CommandDetail">
 <summary>
 命令详情，包含通道信息，对端信息，超时时间，重发次数
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CheckCommandParameter(DoNetDrive.Core.Command.INCommandParameter)">
 <summary>
 获取检查命令的参数类型
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetStatus_Stop">
 <summary>
 获取用于表示命令已停止的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetStatus_Faulted">
 <summary>
 获取用于表示命令已失败的状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetStatus_Wating">
 <summary>
 获取用于表示命令正在准备中的状态(还未开始发送数据)
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetStatus_Completed">
 <summary>
 获取表示命令已完成的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetStatus_Runing">
 <summary>
 获取用于处理正在运行中的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetStatus_Timeout">
 <summary>
 获取用于处理已超时的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetStatus_WaitResponse">
 <summary>
 获取用于处理等待响应的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetEventArgs">
 <summary>
 获取一个用户触发事件时发送到事件中的参数
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetStatus">
 <summary>
 获取命令状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.getProcessMax">
 <summary>
 总步骤数
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.getProcessStep">
 <summary>
 当前指令进度
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.SetConnector(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 命令加入到连接器，和连接器绑定关系
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.SetStatus(DoNetDrive.Core.Command.INCommandStatus)">
 <summary>
 设置命令的状态,变更当前状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CreatePacket">
 <summary>
 从等待执行，变更为开始执行，此时需要立刻编译此命令，生成 Packet ，方便发送时调用
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.PushReadByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 由连接通道推送来的接收缓冲区中的 Bytebuf
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CommandNext(DoNetDrive.Core.Packet.INPacket)">
 <summary>
 检查并进行命令的下一部分
 </summary>
 <param name="readPacket">收到的数据包</param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CheckTimeout">
 <summary>
 检查此命令是否超时
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CommandReSend">
 <summary>
 准备重新发送命令，可能子类需要清空一些标志或缓冲区，则再此函数中执行
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CommandOver">
 <summary>
 命令结束的时候调用
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.RemoveBinding">
 <summary>
 解除绑定
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CommandCompleted">
 <summary>
 表示命令已完结，改变状态，并立刻发送命令完毕的事件通知
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CommandError">
 <summary>
 命令发生错误，终止执行
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CommandReady">
 <summary>
 命令准备就绪，等待下次发送
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.SetRuningStatus">
 <summary>
 设定状态为正在执行并立刻加入到线程任务队列中，为发送数据包做准备
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.CommandWaitResponse">
 <summary>
 命令继续等待
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.Run">
 <summary>
 开始执行当前状态的运行逻辑
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.SendPacket">
 <summary>
 发送数据包
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.Clone">
 <summary>
 复制一个当前命令的浅表副本
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.fireCommandProcessEvent">
 <summary>
 命令发生进程发生变化时调用，用于触发产生命令进度变更事件
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.fireCommandTimeout">
 <summary>
 完结此命令，并产生命令超时事件
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.fireAuthenticationErrorEvent">
 <summary>
 完结此命令，并产生身份校验错误事件
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.fireFireCommandErrorEvent">
 <summary>
 完结此命令，并产生命令错误事件
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.GetNewCmdDataBuf(System.Int32)">
 <summary>
 获取一个指定大小的Buf
 </summary>
 <param name="iSize">大小</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.VerifyError(System.String)">
 <summary>
 产生一个错误
 </summary>
 <param name="sText">错误描述</param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommand.Release0">
 <summary>
 释放资源
 </summary>
</member>
<member name="P:DoNetDrive.Core.Command.AbstractCommandDetail.Connector">
 <summary>
 用来存储命令将要使用的连接器信息
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.AbstractCommandDetail.BeginTime">
 <summary>
 起始时间
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.AbstractCommandDetail.EndTime">
 <summary>
 命令执行完毕时间
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.AbstractCommandDetail.Timeout">
 <summary>
 命令在通道中发送后的最大等待应答事件，单位毫秒
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.AbstractCommandDetail.RestartCount">
 <summary>
 当命令发生超时后，最大重试次数。
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.AbstractCommandDetail.UserData">
 <summary>
 用户数据，可以用于保存临时数据
 </summary>
 <returns></returns>
</member>
<member name="E:DoNetDrive.Core.Command.AbstractCommandDetail.CommandCompleteEvent">
 <summary>
 当命令完成时，会触发此函数回调
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Command.AbstractCommandDetail.CommandProcessEvent">
 <summary>
 命令进度指示，当命令开始执行会连续触发，汇报命令执行的进度
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Command.AbstractCommandDetail.CommandErrorEvent">
 <summary>
 发生错误时触发事件，一般是连接握手失败，串口不存在，usb不存在，没有写文件权限等
 还有可能是用户调用Stop指令强制停止命令
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Command.AbstractCommandDetail.CommandTimeout">
 <summary>
 命令超时时，触发此回到函数
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Command.AbstractCommandDetail.AuthenticationErrorEvent">
 <summary>
 身份鉴权时发生错误的事件,
 一般发生于密码错误，校验失败等情况！
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommandDetail.fireCommandCompleteEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发命令完成消息
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommandDetail.fireCommandProcessEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发事件--命令进度指示
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommandDetail.fireCommandTimeout(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发事件-- 命令超时
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommandDetail.fireAuthenticationErrorEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发事件--身份鉴权错误
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommandDetail.FireCommandErrorEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发事件--命令错误事件
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommandDetail.#ctor(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 初始化详情，登记连接通道信息，并初始化命令超时时间和重发次数
 </summary>
 <param name="cnt"></param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommandDetail.Clone">
 <summary>
 复制当前命令详情的浅表副本
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractCommandDetail.Equals(DoNetDrive.Core.Command.INCommandDetail)">
 <summary>
 比较命令详情是否都指向相同通道和相同的对端身份
 </summary>
 <param name="other">待比较的详情</param>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Command.AbstractRequestHandle._Decompile">
 <summary>
 命令解析器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractRequestHandle.fireRequestEvent(DoNetDrive.Core.Connector.INConnector,DoNetDrive.Core.Packet.INPacket)">
 <summary>
 触发数据请求事件
 </summary>
 <param name="connector"></param>
 <param name="p"></param>
</member>
<member name="M:DoNetDrive.Core.Command.AbstractRequestHandle.DisposeResponse(DoNetDrive.Core.Connector.INConnector,DotNetty.Buffers.IByteBuffer)">
 <summary>
 处理响应
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.Byte.ByteCommand">
 <summary>
 用于将一个字节流命令发送出去
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Byte.ByteCommand.#ctor(DoNetDrive.Core.Command.INCommandDetail,DoNetDrive.Core.Command.Byte.ByteCommandParameter)">
 <summary>
 初始化两个重要参数，并进行参数检查
 </summary>
 <param name="cd">表示命令详情，包含通道信息，对端信息，超时时间，重发次数</param>
</member>
<member name="M:DoNetDrive.Core.Command.Byte.ByteCommand.CreatePacket">
 <summary>
 指令开始执行时，用于让命令组装第一个用于发送的数据包 CommandNext0 中组装（如果有的话）
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Byte.ByteCommand.Release0">
 <summary>
 释放使用的资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Byte.ByteCommand.CommandNext(DoNetDrive.Core.Packet.INPacket)">
 <summary>
 检查并进行命令的下一部分
 </summary>
 <param name="readPacket">收到的数据包</param>
</member>
<member name="M:DoNetDrive.Core.Command.Byte.ByteCommand.CommandReSend">
 <summary>
 重发时的设置参数
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Byte.ByteCommand.CheckCommandParameter(DoNetDrive.Core.Command.INCommandParameter)">
 <summary>
 检查命令参数
 </summary>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Command.Byte.ByteCommandParameter">
 <summary>
 表示一个字节流的参数
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.Byte.ByteCommandParameter.Buffer">
 <summary>
 需要发送的文本
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Byte.ByteCommandParameter.#ctor(DotNetty.Buffers.IByteBuffer)">
 <summary>
 使用字节流初始化参数
 </summary>
 <param name="buf"></param>
</member>
<member name="M:DoNetDrive.Core.Command.Byte.BytePacket.#ctor(DoNetDrive.Core.Command.Byte.ByteCommandParameter)">
 <summary>
 初始化数据包，让数据包和参数关联
 </summary>
 <param name="par"></param>
</member>
<member name="M:DoNetDrive.Core.Command.Byte.BytePacket.GetPacketData(DotNetty.Buffers.IByteBufferAllocator)">
 <summary>
 获取一个buf用于发送数据
 </summary>
 <param name="Allocator"></param>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Command.CommandStatus.Completed">
 <summary>
 命令已完成的状态
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.CommandStatus.Faulted">
 <summary>
 命令由于发生错误而完成
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.CommandStatus.Timeout">
 <summary>
 命令发生超时错误时的状态
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.CommandStatus.Runing">
 <summary>
 命令正在执行
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.CommandStatus.Waiting">
 <summary>
 命令还未开始执行
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.CommandStatus.WaitResponse">
 <summary>
 命令正在等待对端的响应
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.CommandStatus.Stop">
 <summary>
 命令由于用户取消而完成
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.CommandStatus_Completed">
 <summary>
 命令已完成的状态
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.CommandStatus_Faulted">
 <summary>
 命令由于发生错误而完成
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.CommandStatus_Timeout">
 <summary>
 命令由于对端超过指定时间后为接收到响应（命令超时）而完成
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.CommandStatus_Runing">
 <summary>
 命令正在执行
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.CommandStatus_WaitResponse">
 <summary>
 命令已发送数据包，等待对端的响应
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.CommandStatus_Waiting">
 <summary>
 命令还未开始执行
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.CommandStatus_Stop">
 <summary>
 命令由于用户取消而完成
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.INCommandDetail">
 <summary>
 包含命令的执行时的一些必要信息，命令执行的连接器通道，命令身份验证信息，用户附加数据，超时重试参数
 </summary>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandDetail.Connector">
 <summary>
 用来存储命令将要使用的连接器信息
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandDetail.BeginTime">
 <summary>
 起始时间
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandDetail.EndTime">
 <summary>
 命令执行完毕时间
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandDetail.Timeout">
 <summary>
 命令在通道中发送后的最大等待应答事件，单位毫秒
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandDetail.RestartCount">
 <summary>
 当命令发生超时后，最大重试次数。
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandDetail.UserData">
 <summary>
 用户数据，可以用于保存临时数据
 </summary>
 <returns></returns>
</member>
<member name="E:DoNetDrive.Core.Command.INCommandEvent.CommandCompleteEvent">
 <summary>
 当命令完成时，会触发此函数回调
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Command.INCommandEvent.CommandProcessEvent">
 <summary>
 命令进度指示，当命令开始执行会连续触发，汇报命令执行的进度
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Command.INCommandEvent.CommandErrorEvent">
 <summary>
 发生错误时触发事件，一般是连接握手失败，串口不存在，usb不存在，没有写文件权限等
 还有可能是用户调用Stop指令强制停止命令
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Command.INCommandEvent.CommandTimeout">
 <summary>
 命令超时时，触发此回到函数
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Command.INCommandEvent.AuthenticationErrorEvent">
 <summary>
 身份鉴权时发生错误的事件,
 一般发生于密码错误，校验失败等情况！
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="T:DoNetDrive.Core.Command.INCommandParameter">
 <summary>
 命令参数
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.INCommandResult">
 <summary>
 命令返回值的存储接口
 </summary>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandRuntime.IsWaitExecute">
 <summary>
 是否正在等待执行
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.GetStatus_Stop">
 <summary>
 获取用于表示命令已停止的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.GetStatus_Faulted">
 <summary>
 获取用于表示命令已失败的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.GetStatus_Wating">
 <summary>
 获取用于表示命令正在准备中的状态(还未开始发送数据)
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.GetStatus_Runing">
 <summary>
 获取用于表示命令正在运行中的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.GetEventArgs">
 <summary>
 获取一个用户触发事件时发送到事件中的参数
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.SetConnector(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 命令加入到连接器
 </summary>
 <param name="connect"></param>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.SetStatus(DoNetDrive.Core.Command.INCommandStatus)">
 <summary>
 设置命令的状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.PushReadByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 由连接通道推送来的接收缓冲区中的 Bytebuf
 </summary>
 <param name="buf"></param>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.CommandOver">
 <summary>
 让命令强制完结，释放掉临时缓冲
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.RemoveBinding">
 <summary>
 从连接通道中结束绑定，命令设定为结束，并释放已使用资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandRuntime.IsRelease">
 <summary>
 检测命令是否已释放
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandStatus.IsCompleted">
 <summary>
 命令是否已完成
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandStatus.IsFaulted">
 <summary>
 是否由于未经处理异常的原因而完成
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandStatus.IsRuning">
 <summary>
 命令知否正在执行
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommandStatus.IsCanceled">
 <summary>
 是否已取消执行
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandStatus.IsNONE">
 <summary>
 是否为未执行状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommandStatus.CheckStatus(DoNetDrive.Core.Command.INCommand)">
 <summary>
 触发命令事件
 </summary>
 <param name="cmd"></param>
</member>
<member name="T:DoNetDrive.Core.Command.AbstractCommandStatus_Completed">
 <summary>
 命令已完成的状态
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.AbstractCommandStatus_Faulted">
 <summary>
 命令由于发生错误而完成
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.AbstractCommandStatus_Timeout">
 <summary>
 命令由于对端超过指定时间后为接收到响应（命令超时）而完成
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.AbstractCommandStatus_Runing">
 <summary>
 命令正在执行
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.AbstractCommandStatus_WaitResponse">
 <summary>
 命令已发送数据包，等待对端的响应
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.AbstractCommandStatus_Waiting">
 <summary>
 命令还未开始执行
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.AbstractCommandStatus_Stop">
 <summary>
 命令由于用户取消而完成
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.INFireCommandEvent.FireCommandCompleteEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 当命令完成时，并将当前命令从队列中移除,会触发此函数回调
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.INFireCommandEvent.fireCommandCompleteEventNotRemoveCommand(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发命令完成消息 ，但是并不移除当前命令
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.INFireCommandEvent.FireCommandProcessEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 命令进度指示，当命令开始执行会连续触发，汇报命令执行的进度
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.INFireCommandEvent.FireCommandErrorEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 发生错误时触发事件，一般是连接握手失败，串口不存在，usb不存在，没有写文件权限等
 还有可能是用户调用Stop指令强制停止命令
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.INFireCommandEvent.FireCommandTimeout(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 命令超时时，触发此回到函数
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Command.INFireCommandEvent.FireAuthenticationErrorEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 身份鉴权时发生错误的事件,
 一般发生于密码错误，校验失败等情况！
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="T:DoNetDrive.Core.Command.INRequestHandle">
 <summary>
 处理连接通道上接收到的数据
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.INRequestHandle.DisposeRequest(DoNetDrive.Core.Connector.INConnector,DotNetty.Buffers.IByteBuffer)">
 <summary>
 处理接收的数据
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.INRequestHandle.DisposeResponse(DoNetDrive.Core.Connector.INConnector,DotNetty.Buffers.IByteBuffer)">
 <summary>
 处理响应
 </summary>
</member>
<member name="T:DoNetDrive.Core.Command.Text.TextCommandParameter">
 <summary>
 表示一个文本的参数
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.Text.TextCommandParameter.Text">
 <summary>
 需要发送的文本
 </summary>
</member>
<member name="F:DoNetDrive.Core.Command.Text.TextCommandParameter.Encoding">
 <summary>
 文本的编码方式
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextCommandParameter.#ctor(System.String)">
 <summary>
 使用一个文本初始化参数
 </summary>
 <param name="t"></param>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextCommandParameter.#ctor(System.String,System.Text.Encoding)">
 <summary>
 使用一个文本和指定编码方式初始化参数
 </summary>
 <param name="t"></param>
 <param name="enc"></param>
</member>
<member name="T:DoNetDrive.Core.Command.Text.TextPacket">
 <summary>
 包含一个文本数据的数据包
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextPacket.#ctor(DoNetDrive.Core.Command.Text.TextCommandParameter)">
 <summary>
 初始化数据包，让数据包和一个参数关联
 </summary>
 <param name="par"></param>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextPacket.GetPacketData(DotNetty.Buffers.IByteBufferAllocator)">
 <summary>
 获取一个buf用于发送数据
 </summary>
 <param name="Allocator"></param>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Command.Text.TextCommand">
 <summary>
 文本命令，可用于发送一个文本
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextCommand.#ctor(DoNetDrive.Core.Command.INCommandDetail,DoNetDrive.Core.Command.Text.TextCommandParameter)">
 <summary>
 初始化两个重要参数，并进行参数检查
 </summary>
 <param name="cd">表示命令详情，包含通道信息，对端信息，超时时间，重发次数</param>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextCommand.CreatePacket">
 <summary>
 指令开始执行时，用于让命令组装第一个用于发送的数据包 CommandNext0 中组装（如果有的话）
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextCommand.Release0">
 <summary>
 释放使用的资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextCommand.CommandNext(DoNetDrive.Core.Packet.INPacket)">
 <summary>
 检查并进行命令的下一部分
 </summary>
 <param name="readPacket">收到的数据包</param>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextCommand.CommandReSend">
 <summary>
 重发时的设置参数
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.Text.TextCommand.CheckCommandParameter(DoNetDrive.Core.Command.INCommandParameter)">
 <summary>
 检查命令参数
 </summary>
 <param name="value"></param>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Command.INCommand">
 <summary>
 命令的封装主体类
 包含协议中具体的命令包装，数据分析，数值判断等一系列逻辑
 </summary>
</member>
<member name="P:DoNetDrive.Core.Command.INCommand.CommandDetail">
 <summary>
 命令所需要的连接通道，对端信息等数据
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.INCommand.Parameter">
 <summary>
 保存用于命令的各种参数
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommand.getResult">
 <summary>
 命令返回结果
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Command.INCommand.GetStatus">
 <summary>
 获取命令状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.INCommand.getProcessMax">
 <summary>
 总步骤数
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.INCommand.getProcessStep">
 <summary>
 当前指令进度
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Command.CommandEventArgs">
 <summary>
 命令返回事件的事件参数
 </summary>
</member>
<member name="P:DoNetDrive.Core.Command.CommandEventArgs.Command">
 <summary>
 命令的主体
 </summary>
</member>
<member name="P:DoNetDrive.Core.Command.CommandEventArgs.CommandDetail">
 <summary>
 命令所包含的连接器，目标设备信息
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.CommandEventArgs.ConnectorDetail">
 <summary>
 命令所包含的连接器，目标设备信息
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.CommandEventArgs.Result">
 <summary>
 命令执行完毕后包含的结果
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.CommandEventArgs.#ctor(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 初始化事件值
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.CommandEventArgs.#ctor(DoNetDrive.Core.Command.INCommand)">
 <summary>
 初始化事件值
 </summary>
</member>
<member name="M:DoNetDrive.Core.Command.CommandEventArgs.GetStatus">
 <summary>
 事件的状态
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.CommandEventArgs.IsCompleted">
 <summary>
 命令是否已完成
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Command.CommandEventArgs.IsFaulted">
 <summary>
 是否由于未经处理异常的原因而完成
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.AbstractConnector">
 <summary>
 连接通道的抽象类，定义了一组连接通道的基本运行逻辑
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector.DefaultChannelKeepaliveMaxTime">
 <summary>
 默认的通道连接保持时间
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector.Lockobject">
 <summary>
 用来进行通道锁操作的对象
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._CommandList">
 <summary>
 连接通道中存在于队列中的命令列表，先进先出集合
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._DecompileList">
 <summary>
 连接通道中附加的消息解释器集合，可对通道收到的数据进行解码，并生成事物消息事件 TransactionMessage
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._IsForcibly">
 <summary>
 表示此连接是保持连接
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._ActivityCommand">
 <summary>
 正在活动中的命令
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._Status">
 <summary>
 连接器通道的状态
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._isRelease">
 <summary>
 指示此通道是否已释放
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._isInvalid">
 <summary>
 表示此通道已失效
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._ActivityDate">
 <summary>
 表示此通道上次的活动时间
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._IsRuning">
 <summary>
 任务是否已加入队列或正在执行
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._IsActivity">
 <summary>
 检查通道是否为活动的状态（已连接的）
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector._IsCloseing">
 <summary>
 指示是否需要关闭通道
 </summary>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.CommandCompleteEvent">
 <summary>
 当命令完成时，会触发此函数回调
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.CommandProcessEvent">
 <summary>
 命令进度指示，当命令开始执行会连续触发，汇报命令执行的进度
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.CommandErrorEvent">
 <summary>
 发生错误时触发事件，一般是连接握手失败，串口不存在，usb不存在，没有写文件权限等
 还有可能是用户调用Stop指令强制停止命令
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.CommandTimeout">
 <summary>
 命令超时时，触发此回到函数
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.AuthenticationErrorEvent">
 <summary>
 身份鉴权时发生错误的事件,
 一般发生于密码错误，校验失败等情况！
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.TransactionMessage">
 <summary>
 事务消息，有些命令发生后会需要异步等待对端传回结果，结果将自动序列化为事物消息，并触发此事件
 </summary>
 <param name="connector">触发事件的连接通道信息</param>
 <param name="EventData">事件所包含数据</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.ClientOnline">
 <summary>
 客户端上线
 </summary>
 <param name="sender">触发事件的连接通道信息</param>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.ClientOffline">
 <summary>
 客户端离线
 </summary>
 <param name="sender">触发事件的连接通道信息</param>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.ConnectorErrorEvent">
 <summary>
 连接通道发生错误时触发事件
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.ConnectorConnectedEvent">
 <summary>
 连接通道连接建立成功时发生
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.AbstractConnector.ConnectorClosedEvent">
 <summary>
 连接通道连接关闭时发生
 </summary>
 <param name="sender"></param>
 <param name="connector"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.#ctor">
 <summary>
 初始化连接通道中的队列列表和解析器列表，并初始化连接通道状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.GetInitializationStatus">
 <summary>
 获取初始化通道状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.GetConnectorType">
 <summary>
 获取此通道的连接器类型
 </summary>
 <returns>连接器类型</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.GetConnectorDetail">
 <summary>
 获取关于本通道的详情
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.GetByteBufAllocator">
 <summary>
 获取连接通道支持的bytebuf分配器
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.WriteByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将生成的bytebuf写入到通道中
 写入完毕后自动释放
 </summary>
 <param name="buf"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.GetEventLoop">
 <summary>
 获取此通道所依附的事件循环通道
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.LocalAddress">
 <summary>
 获取本地绑定地址
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.GetCommandCount">
 <summary>
 命令队列数量
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.CommandListIsEmpty">
 <summary>
 命令队列是否为空
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.AddCommand(DoNetDrive.Core.Command.INCommandRuntime)">
 <summary>
 将一个命令添加到本通道的命令队列中
 </summary>
 <param name="cd"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.RemoveCommand(DoNetDrive.Core.Command.INCommandRuntime)">
 <summary>
 从队列中删除一个命令
 </summary>
 <param name="eventCommand"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.CheckCommandList">
 <summary>
 检查命令状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.StopCommand(DoNetDrive.Core.Command.INCommandDetail)">
 <summary>
 停止指定类型的命令，终止命令继续执行
 </summary>
 <param name="cdt">命令详情，如果为Null表示停止此通道中的所有命令</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.ClearCommand(System.Boolean)">
 <summary>
 清空所有在缓冲中的命令
 </summary>
 <param name="isStop"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.RaiseCommandErrorEvent(DoNetDrive.Core.Command.INCommandRuntime,System.Boolean)">
 <summary>
 连接错误时，触发此回到函数
 </summary>
 <param name="cmd"></param>
 <param name="bIsStopCommand"></param>
</member>
<member name="P:DoNetDrive.Core.Connector.AbstractConnector.IsInvalid">
 <summary>
 确定通道是否已失效
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.SetInvalid">
 <summary>
 将通道设置为无效状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.IsActivity">
 <summary>
 检查通道是否为活动的状态（已连接的）
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.UpdateActivityTime">
 <summary>
 更新通道活动时间
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnector.ChannelKeepaliveMaxTime">
 <summary>
 通道保活时长，单位秒，超过这个时间没有调用  UpdateActivityTime 函数就会自动断开连接
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.CheckIsInvalid">
 <summary>
 检查通道是否已失效 1分钟无活动，无命令任务则自动失效
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.IsForciblyConnect">
 <summary>
  判断此通道是否保持连接，即通道在发送完毕命令后保持连接
 </summary>
 <returns> true 表示通道保持打开</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.OpenForciblyConnect">
 <summary>
 设定此连接器通道为保持打开状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.CloseForciblyConnect">
 <summary>
 禁止此连接器通道为保持连接状态，即命令发送完毕后关闭连接。
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.GetStatus">
 <summary>
 获取此连接通道的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.Run">
 <summary>
 开始执行这个连接通道
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.CheckStatus">
 <summary>
 检查当前状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.fireCommandCompleteEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发命令完成消息，并将当前命令从队列中移除
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.fireCommandCompleteEventNotRemoveCommand(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发命令完成消息 ，但是并不移除当前命令
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.fireCommandProcessEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发事件--命令进度指示
 </summary>
 <param name="e"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.fireCommandTimeout(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发事件-- 命令超时
 </summary>
 <param name="e"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.fireAuthenticationErrorEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发事件--身份鉴权错误
 </summary>
 <param name="e"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.FireCommandErrorEvent(DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 触发事件--命令错误事件
 </summary>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.fireTransactionMessage(DoNetDrive.Core.Data.INData)">
 <summary>
 触发事件--事务消息
 </summary>
 <param name="EventData">事件所包含数据</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.FireClientOnline(DoNetDrive.Core.Connector.ServerEventArgs)">
 <summary>
 触发事件--客户端上线通知
 </summary>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.FireClientOnline(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 客户端上线通知
 </summary>
 <param name="conn">客户端所绑定的连接器</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.FireClientOffline(DoNetDrive.Core.Connector.ServerEventArgs)">
 <summary>
 触发事件--客户端离线通知
 </summary>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.FireClientOffline(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 触发事件--客户端离线通知
 </summary> 
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.FireConnectorConnectedEvent(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 产生通道已连接的事件
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.FireConnectorClosedEvent(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 连接通道连接关闭时发生
 </summary>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.FireConnectorErrorEvent(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 连接通道发生错误时触发事件
 </summary>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.AddRequestHandle(DoNetDrive.Core.Command.INRequestHandle)">
 <summary>
 当需要解析监控指令时，添加数据包解析器到解析器列表中
 </summary>
 <param name="handle">数据包解析器</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.RemoveRequestHandle(System.Type)">
 <summary>
 从连接通道中删除指定类型的数据包解析器
 </summary>
 <param name="handle">数据包解析器的类型</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.DisposeRequest(DotNetty.Buffers.IByteBuffer)">
 <summary>
 解析收到的监控数据包
 </summary>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.DisposeResponse(DotNetty.Buffers.IByteBuffer)">
 <summary>
 处理命令的响应包
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.ReadByteBuffer(DotNetty.Buffers.IByteBuffer)">
 <summary>
 读取到数据后的处理
 </summary>
 <param name="msg">将读取到的数据打包到bytebuffer</param>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnector.CloseConnector">
 <summary>
 关闭通道
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.AbstractConnectorDetail">
 <summary>
 通讯连接器详情基类基本定义
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.AbstractConnectorDetail.Timeout">
 <summary>
 连接器连接到对端时最大等待时间，单位毫秒
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Connector.AbstractConnectorDetail.RestartCount">
 <summary>
 连接器连接到对端失败后，最大重试次数
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnectorDetail.GetAssemblyName">
 <summary>
 获取连接通道所在的程序集
 例如：DoNetDrive.Core
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnectorDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 例如：Connector.TCPClient.TCPClientConnector
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnectorDetail.Clone">
 <summary>
 复制当前通道信息的浅表副本
 </summary>
 <returns>表示连接通道信息的副本</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnectorDetail.Equals(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 用来比较此连接通道是否为同一个
 </summary>
 <param name="other"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.AbstractConnectorDetail.GetKey">
 <summary>
 获取一个用于界定此通道的唯一Key值
 </summary>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Connector.AbstractConnectorDetail._Exception">
 <summary>
 一个异常报告
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1">
 <summary>
 基于Netty的通讯通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.RemoteDetail">
 <summary>
 远程IP信息和端口信息
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.LocalDetail">
 <summary>
 本地IP信息
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1._ClientChannel">
 <summary>
 连接管理器所管理的通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1._Handler">
 <summary>
 客户端操作的操作类
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1._ConnectFailCount">
 <summary>
 连接超时时间和连接失败次数
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.GetConnectorType">
 <summary>
 返回此通道的类路径
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.GetInitializationStatus">
 <summary>
 返回此通道的初始化状态
 </summary>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.ThisConnectorDetail">
 <summary>
 标识本通道的信息类，只读
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.GetConnectorDetail">
 <summary>
 返回记录此通道信息的类
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.GetConnectorDetail0">
 <summary>
 创建一个连接头像详情对象，包含用于描述当前连接通道的信息
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.ConnectFail">
 <summary>
 远程连接失败的处理过程
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.ConnectFail0">
 <summary>
 当连接通道连接已失效时调用
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.GetStatus_Fail">
 <summary>
 获取一个状态表示连接通道连接失败
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.ConnectSuccess">
 <summary>
 远程连接成功
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.LocalAddress">
 <summary>
 获取本地绑定地址
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.ConnectSuccess0">
 <summary>
 连接通道建立连接成功后的后续处理
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.GetStatus_Connected">
 <summary>
 获取一个状态表示连接通道连接已建立并工作正常的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.CloseConnector">
 <summary>
 关闭连接
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.channelRead0(DotNetty.Transport.Channels.IChannelHandlerContext,`0)">
 <summary>
 接收到数据
 </summary>
 <param name="ctx"></param>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.WriteByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将生成的bytebuf写入到通道中
 写入完毕后自动释放
 </summary>
 <param name="buf"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.GetByteBufAllocator">
 <summary>
 获取连接通道支持的bytebuf分配器
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.GetEventLoop">
 <summary>
 获取此通道所依附的事件循环通道
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.UserEventTriggered(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)">
 <summary>
 自定义通道事件
 </summary>
 <param name="ctx"></param>
 <param name="evt"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.ChannelInactive(DotNetty.Transport.Channels.IChannelHandlerContext)">
 <summary>
 在连接正常或不正常关闭时发生
 </summary>
 <param name="ctx"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.ExceptionCaught(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)">
 <summary>
 发生错误时，触发此事件
 </summary>
 <param name="ctx"></param>
 <param name="ex"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.Release0">
 <summary>
 释放资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyClientConnector`1.Release1">
 <summary>
 下一级子类释放资源时调用
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.Client.AbstractNettyServerClientConnector`1.mKey">
 <summary>
 表示一个代表在TCP服务器节点下的唯一键值，通过此键值查询通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.Client.AbstractNettyServerClientConnector`1.EventArg">
 <summary>
 表示此通道的事件参数，当发生通道事件时传输给事件订阅者
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyServerClientConnector`1.#ctor(System.String,DotNetty.Transport.Channels.IChannel,System.Int64)">
 <summary>
 创建一个客户端
 </summary>
 <param name="sKey"></param>
 <param name="channel"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyServerClientConnector`1.GetInitializationStatus">
 <summary>
 返回此通道的初始化状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyServerClientConnector`1.GetStatus_Fail">
 <summary>
 获取一个状态表示连接通道连接失败
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyServerClientConnector`1.GetStatus_Connected">
 <summary>
 获取一个状态表示连接通道连接已建立并工作正常的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyServerClientConnector`1.ConnectFail0">
 <summary>
 当连接通道连接已失效时调用
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyServerClientConnector`1.ConnectSuccess0">
 <summary>
 连接通道建立连接成功后的后续处理
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.AbstractNettyServerClientConnector`1.Release1">
 <summary>
 释放资源时调用
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.Client.TCPClientNettyChannelHandler`1">
 <summary>
 TCP Client 连接通道的 Netty处理器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.TCPClientNettyChannelHandler`1.Release">
 <summary>
 释放关联
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.TCPClientNettyChannelHandler`1.ExceptionCaught(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)">
 <summary>
 发生错误时，触发此事件
 </summary>
 <param name="ctx"></param>
 <param name="ex"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.TCPClientNettyChannelHandler`1.ChannelRead0(DotNetty.Transport.Channels.IChannelHandlerContext,`0)">
 <summary>
 接收到数据事件
 </summary>
 <param name="ctx"></param>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.TCPClientNettyChannelHandler`1.ChannelReadComplete(DotNetty.Transport.Channels.IChannelHandlerContext)">
 <summary>
 当通道全部读取完毕后发生的事件
 </summary>
 <param name="context"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.TCPClientNettyChannelHandler`1.ChannelInactive(DotNetty.Transport.Channels.IChannelHandlerContext)">
 <summary>
 不活跃事件，一般就是关闭连接
 </summary>
 <param name="ctx"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.Client.TCPClientNettyChannelHandler`1.UserEventTriggered(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)">
 <summary>
 自定义用户事件，在这里用于接收超时事件
 </summary>
 <param name="ctx"></param>
 <param name="evt"></param>
</member>
<member name="F:DoNetDrive.Core.Connector.ConnectorManageFactory.mAllocator">
 <summary>
 通道分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorManageFactory.GetNewTaskManage(DotNetty.Transport.Channels.IEventLoop)">
 <summary>
 创建任务管理器
 </summary>
 <param name="elp"></param>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.ConnectorManager">
 <summary>
 连接通道管理器，管理一组连接通道，用于维护通道状态和执行通道指令
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ConnectorManager.mAllocator">
 <summary>
 通道分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorManager.#ctor(DotNetty.Transport.Channels.IEventLoop,DoNetDrive.Core.ConnectorAllocator)">
 <summary>
 连接通道管理器，管理一组连接通道，用于维护通道状态和执行通道指令
 </summary>
 <param name="elp"></param>
 <param name="Acr"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorManager._Release">
 <summary>
 释放资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorManager.ClientRun(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 检查客户端状态
 </summary>
 <param name="oConn"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.ConnectorObserverHandler">
 <summary>
 连接通道观察者，可以观察连接通道上的数据收发 十六进制格式输出
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ConnectorObserverHandler.UseEcho">
 <summary>
 使用Echo，返回发送的内容
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ConnectorObserverHandler.HexDump">
 <summary>
 十六进制输出内容
 </summary>
</member>
<member name="E:DoNetDrive.Core.Connector.ConnectorObserverHandler.DisposeRequestEvent">
 <summary>
 接收到数据
 </summary>
 <param name="connector"></param>
 <param name="msg"></param>
</member>
<member name="E:DoNetDrive.Core.Connector.ConnectorObserverHandler.DisposeResponseEvent">
 <summary>
 准备发送数据
 </summary>
 <param name="connector"></param>
 <param name="msg"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.ConnectorStatus_Free">
 <summary>
 连接器状态--空闲
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorStatus_Free.OpenConnector(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 打开连接器
 </summary>
 <param name="connector"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.ConnectorStatus_Connecting">
 <summary>
 连接器状态--正在连接
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorStatus_Connecting.CheckConnectingStatus(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 检查连接状态
 </summary>
 <param name="connector"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.ConnectorStatus_Connected">
 <summary>
 连接器状态--已连接
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ConnectorStatus_Connected.TimeInterval">
 <summary>
 连接建立完毕后，每次检查连接器状态的间隔时间
 默认为5毫秒
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorStatus_Connected.CheckCommandList(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 检查命令队列中是否有需要发送的命令
 </summary>
 <param name="connector"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorStatus_Connected.CloseConnector(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 无命令也无需占用，通道需要关闭
 </summary>
 <param name="connector"></param>
</member>
<member name="F:DoNetDrive.Core.Connector.DotNettyAllocator.BufferAllocator">
 <summary>
 本系统使用的Buffer分配器
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.DotNettyAllocator.ServerParentEventLoopGroup">
 <summary>
 服务端主节点事件循环组
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.DotNettyAllocator.ServerChildEventLoopGroup">
 <summary>
 服务端子节点事件循环组
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.DotNettyAllocator.ClientEventLoopGroup">
 <summary>
 客户端事件循环组 TCP/Client, UDP Client
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.DotNettyAllocator.UseLibuv">
 <summary>
 使用 Libuv 库
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.DotNettyAllocator.mIsRelease">
 <summary>
 是否已释放
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.DotNettyAllocator.DefaultServerEventLoopGroupCount">
 <summary>
 默认的事件循环数量
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.DotNettyAllocator.DefaultChildEventLoopGroupCount">
 <summary>
 默认的事件循环数量
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.DotNettyAllocator.IsRelease">
 <summary>
 检查事件循环组是否已释放
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.DotNettyAllocator.GetServerParentEventLoopGroup">
 <summary>
 返回用于初始化服务器 ServerBootstrap 的主节点 EventLoopGroup
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.DotNettyAllocator.GetServerChildEventLoopGroup">
 <summary>
 返回用于初始化服务器 ServerBootstrap 的子节点 EventLoopGroup
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.DotNettyAllocator.GetClientEventLoopGroup">
 <summary>
 返回用于初始化客户端通道的 Bootstrap (TCPClient or UDP) 的 EventLoopGroup
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.DotNettyAllocator.shutdownGracefully">
 <summary>
 释放所有已创建的 EventLoopGroup
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.E_ConnectorType.OnSerialPort">
 <summary>
 使用 RS232、RS485 通讯
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.E_ConnectorType.OnTCPClient">
 <summary>
 使用 TCP 协议，作为客户端连接到指定IP和端口的服务器
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.E_ConnectorType.OnTCPServer_Client">
 <summary>
 使用 TCP 协议，在本地服务器中查询已连接到的客户端，需要指定客户端Key值
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.E_ConnectorType.OnUDP">
 <summary>
 使用 UDP 协议，发送数据到指定IP和端口，可指定本地绑定的IP和端口
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.E_ConnectorType.OnFile">
 <summary>
 将需要指令写入到指定的文件地址中，需要指定文件路径和名称，并确保有可写权限
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorAllocator.GetConnectorTypeName">
 <summary>
 获取分配器可分配的连接器类全名
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorAllocator.GetNewConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 创建一个新的连接通道
 </summary>
 <param name="detail"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorAllocator.shutdownGracefully">
 <summary>
 关闭这个连接通道分配器
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.ConnectorObserverTextHandler">
 <summary>
 基于文本的通道观察者
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ConnectorObserverTextHandler._Debug">
 <summary>
 输出接口
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ConnectorObserverTextHandler.TextEncoding">
 <summary>
 文字编码
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorObserverTextHandler.DisposeRequest(DoNetDrive.Core.Connector.INConnector,DotNetty.Buffers.IByteBuffer)">
 <summary>
 接收的数据
 </summary>
 <param name="connector"></param>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorObserverTextHandler.DisposeResponse(DoNetDrive.Core.Connector.INConnector,DotNetty.Buffers.IByteBuffer)">
 <summary>
 发送的数据
 </summary>
 <param name="connector"></param>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorObserverTextHandler.Dispose">
 <summary>
 关闭观察者
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.IObserverTextDebug">
 <summary>
 文本观察者输出接口
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.IObserverTextDebug.DisposeRequest(DoNetDrive.Core.Connector.INConnector,System.String)">
 <summary>
 接收文本
 </summary>
 <param name="connector"></param>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.IObserverTextDebug.DisposeResponse(DoNetDrive.Core.Connector.INConnector,System.String)">
 <summary>
 发送文本
 </summary>
 <param name="connector"></param>
 <param name="msg"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail">
 <summary>
 表示一个串口通讯的通道详情
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail.Port">
 <summary>
 电脑上的串口号
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail.Baudrate">
 <summary>
 波特率；
 可选值：19200,115200 等标准值
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail.#ctor(System.Byte)">
 <summary>
 根据串口号和波特率初始化
 </summary>
 <param name="iport">串口号</param>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail.#ctor(System.Byte,System.Int32)">
 <summary>
 根据串口号和波特率初始化
 </summary>
 <param name="iport">串口号</param>
 <param name="iBaudrate">波特率</param>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail.Equals(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 用来比较此连接通道是否为同一个
 </summary>
 <param name="other"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail.GetKey">
 <summary>
 获取一个用于界定此通道的唯一Key值
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail.ToString">
 <summary>
 打印此详情所指示的连接信息
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortDetail.GetAssemblyName">
 <summary>
 获取连接通道所在的程序集
 例如：DoNetDrive.Core
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector">
 <summary>
 表示一个串口通道，使用RS232、RS485方式或USB转串口方式和硬件通讯
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.mConnectorWriteError">
 <summary>
 串口的写操作错误次数
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.mSerialPort">
 <summary>
 串口操作类
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector._Detail">
 <summary>
 保存和此通道相关联的描述
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector._EventLoop">
 <summary>
 此通道所在的事件循环
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.#ctor(DoNetDrive.Core.Connector.SerialPort.SerialPortDetail)">
 <summary>
 根据指定的串口参数，创建连接通道
 </summary>
 <param name="dtl"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.GetConnectorDetail">
 <summary>
 返回描述此通道的连接对象描述符
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.GetInitializationStatus">
 <summary>
 返回此通道的初始化状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.GetConnectorType">
 <summary>
 返回此通道的类路径
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.GetByteBufAllocator">
 <summary>
 获取连接通道支持的bytebuf分配器
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.GetEventLoop">
 <summary>
 获取此通道所依附的事件循环通道
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.LocalAddress">
 <summary>
 获取本地绑定地址
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.Open">
 <summary>
 打开串口
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.CloseConnector">
 <summary>
 关闭串口
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.CheckConnector">
 <summary>
 检查通道是否已开启
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.ReadConnector">
 <summary>
 读通道中的数据
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.WriteByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 发送数据
 </summary>
 <param name="buf"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortConnector.Release0">
 <summary>
 释放资源
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.SerialPort.SerialPortStatus_Free">
 <summary>
 表示通道空闲，未开启串口的状态
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.SerialPort.SerialPortStatus_Free.Free">
 <summary>
 空闲状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortStatus_Free.OpenConnector(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 打开通道，打开串口
 </summary>
 <param name="connector"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.SerialPort.SerialPortStatus_Opened">
 <summary>
 表示串口已开启的状态
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.SerialPort.SerialPortStatus_Opened.Opened">
 <summary>
  表示串口已开启的状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortStatus_Opened.CheckCommandList(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 检查通道中的命令列表，执行命令
 </summary>
 <param name="connector"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.SerialPort.SerialPortStatus_Opened.CloseConnector(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 关闭串口
 </summary>
 <param name="connector"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.IPDetail">
 <summary>
 保存IP信息 -- IPv4
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.IPDetail.Addr">
 <summary>
 IP地址或网址
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.IPDetail.Port">
 <summary>
 网络端口 1-65535
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.IPDetail.#ctor(System.Net.EndPoint)">
 <summary>
 将IP参数保存起来
 </summary>
 <param name="localAddress"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.IPDetail.#ctor(System.String,System.Int32)">
 <summary>
 将IP参数保存起来
 </summary>
 <param name="ip"></param>
 <param name="iPort"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPClient.SSLCertificateDetail">
 <summary>
 表示一个SSL证书
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.SSLCertificateDetail.IsSSL">
 <summary>
 是否启用SSL安全连接
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.SSLCertificateDetail.Certificate">
 <summary>
 用于SSL安全连接的数字证书
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.SSLCertificateDetail.SSLStreamFactory">
 <summary>
 用于创建SSL安全套接字的流工厂
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.SSLCertificateDetail.#ctor(System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Func{System.IO.Stream,System.Net.Security.SslStream})">
 <summary>
 创建一个证书详情
 </summary>
 <param name="bSSL"></param>
 <param name="oX509"></param>
 <param name="oSSLFac"></param>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.lockobj">
 <summary>
 用于单例模式加锁的
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.mTCPClientAllocator">
 <summary>
 用于生成TCPClient的分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.GetAllocator">
 <summary>
 获取用于生成TCPClient的分配器
 </summary>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.CONNECT_TIMEOUT_Default">
 <summary>
 默认连接超时，单位毫秒
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.CONNECT_RECONNECT_Default">
 <summary>
 默认重新连接次数
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.CONNECT_TIMEOUT_MILLIS_MAX">
 <summary>
 最大40秒连接超时，单位毫秒
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.CONNECT_TIMEOUT_MILLIS_MIN">
 <summary>
 最小1秒连接超时，单位毫秒
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.CONNECT_RECONNECT_MAX">
 <summary>
 最大重新连接次数
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.#ctor(DoNetDrive.Core.Connector.TCPClient.TCPClientChannelInitializer)">
 <summary>
 初始化分配器，建立 Bootstrap ，并分配 EventLoopGroup
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.shutdownGracefully">
 <summary>
 关闭这个连接通道分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.GetConnectorTypeName">
 <summary>
 获取分配器可分配的连接器类全名
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.GetNewConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 创建一个新的连接通道
 </summary>
 <param name="detail"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.Connect(DoNetDrive.Core.Connector.TCPClient.TCPClientDetail,System.Int32)">
 <summary>
 连接到远程服务器
 </summary>
 <param name="detail"></param>
 <param name="iTimeOut"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator.SetTCPInitializerPar(System.Net.IPEndPoint,DoNetDrive.Core.Connector.TCPClient.TCPClientDetail)">
 <summary>
 设置初始化参数
 </summary>
 <param name="detail"></param>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientChannelInitializer.mLastCertificate">
 <summary>
 最近使用的SSL证书
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientChannelInitializer._CertificateList">
 <summary>
 证书列表
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientChannelInitializer.SetSSLPar(System.Net.IPEndPoint,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Func{System.IO.Stream,System.Net.Security.SslStream})">
 <summary>
 设置SSL参数
 </summary>
 <param name="bSSL"></param>
 <param name="oX509"></param>
 <param name="oSSLFac"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientChannelInitializer.CreateSSLStream(System.IO.Stream)">
 <summary>
 创建一个SSL流
 </summary>
 <param name="oIOStream"></param>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector">
 <summary>
 用于和TCP Server进行通讯的TCP Client
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.ClientAllocator">
 <summary>
 本连接通道绑定的通道分配器
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector._ConnectDate">
 <summary>
 连接开始时间
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector._ConnectTimeoutMSEL">
 <summary>
 最大连接等待时间
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector._ReconnectMax">
 <summary>
 最大重新连接次数
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.#ctor(DoNetDrive.Core.Connector.TCPClient.TCPClientAllocator,DoNetDrive.Core.Connector.TCPClient.TCPClientDetail)">
 <summary>
 初始化TCP客户端对象
 </summary>
 <param name="acr">通道分配器</param>
 <param name="detail">标识此通道的信息类</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.SetConnectOption(DoNetDrive.Core.Connector.TCPClient.TCPClientDetail)">
 <summary>
 设置连接参数，超时上限和重连上限
 </summary>
 <param name="detail"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.SetConnectOptionByDefault">
 <summary>
 设定默认的超时等待和重连参数
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.GetConnectorType">
 <summary>
 返回此通道的类路径
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.GetInitializationStatus">
 <summary>
 返回此通道的初始化状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.GetConnectorDetail0">
 <summary>
 创建一个连接对像详情对象，包含用于描述当前连接通道的信息
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.ConnectServer">
 <summary>
 开始连接到远端服务器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.connectCallback(System.Threading.Tasks.Task{DotNetty.Transport.Channels.IChannel})">
 <summary>
 连接完毕时的回调函数，指示连接是否已完成
 </summary>
 <param name="tak"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.AddChannelHandler">
 <summary>
 添加通道处理器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.ConnectFail0">
 <summary>
 当连接通道连接已失效时调用
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.GetStatus_Fail">
 <summary>
 获取一个状态表示连接通道连接失败
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.ConnectSuccess0">
 <summary>
 连接通道建立连接成功后的后续处理
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.GetStatus_Connected">
 <summary>
 获取一个状态表示连接通道连接已建立并工作正常的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientConnector.Release1">
 <summary>
 释放资源
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail_Readonly._ConnectAlias">
 <summary>
 别名
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail_Readonly._Addr">
 <summary>
 远程服务器的IP或域名
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail_Readonly._Port">
 <summary>
 远程服务器的监听端口
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail_Readonly._LocalAddr">
 <summary>
 连接远程服务器的本地IP
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail_Readonly._LocalPort">
 <summary>
 连接远程服务器的本地端口
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail_Readonly.#ctor(DoNetDrive.Core.Connector.TCPClient.TCPClientDetail)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="oTCP">远程服务器的详情</param>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientConnectorStatus.Free">
 <summary>
 空闲状态
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientConnectorStatus.Connecting">
 <summary>
 正在连接远程主机的状态
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientConnectorStatus.Connected">
 <summary>
 远程连接成功的状态
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientConnectorStatus.Fail">
 <summary>
 远程连接失败的状态
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPClient.TCPClientConnectorStatus_Free">
 <summary>
 表示通道空闲，连接已关闭的状态
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail">
 <summary>
 表示一个 TCP Client 通道的详情
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.ConnectAlias">
 <summary>
 通道的别名 自定义通道Key
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.Addr">
 <summary>
 远程服务器的IP
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.RemoteHost">
 <summary>
 远程主机名
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.Port">
 <summary>
 远程服务器的监听端口
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.LocalAddr">
 <summary>
 连接远程服务器的本地IP
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.LocalPort">
 <summary>
 连接远程服务器的本地端口
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.IsSSL">
 <summary>
 是否启用SSL安全连接
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.Certificate">
 <summary>
 用于SSL安全连接的数字证书
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.SSLStreamFactory">
 <summary>
 用于创建SSL安全套接字的流工厂
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.#ctor(System.String,System.Int32)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.#ctor(System.String,System.Int32,System.String,System.Int32)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
 <summary>
 初始化详情
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
 <param name="bSSL">是否开启SSL</param>
 <param name="oX509">使用的证书</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Func{System.IO.Stream,System.Net.Security.SslStream})">
 <summary>
 初始化详情
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
 <param name="bSSL">是否开启SSL</param>
 <param name="oX509">使用的证书</param>
 <param name="oSSLFac">用于创建SSL安全套接字的流工厂</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.GetAssemblyName">
 <summary>
 获取连接通道所在的程序集
 </summary>
 <returns>程序集名称</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.Equals(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 用来比较此连接通道是否为同一个
 </summary>
 <param name="other"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.GetKey">
 <summary>
 获取一个用于界定此通道的唯一Key值
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPClient.TCPClientDetail.ToString">
 <summary>
 打印此详情所指示的连接信息
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPServer.Client.TCPClientChannelInitializer">
 <summary>
 TCP 客户端通道初始化类，在此类中初始化  TCPServer.Client.TCPClientConnector 类
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPClientChannelInitializer.InitChannel(DotNetty.Transport.Channels.IChannel)">
 <summary>
 初始化服务器客户端(子节点)
 </summary>
 <param name="channel"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPClientConnector.#ctor(System.String,DotNetty.Transport.Channels.IChannel,System.Int64)">
 <summary>
 创建一个客户端
 </summary>
 <param name="sKey"></param>
 <param name="channel"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPClientConnector.Release1">
 <summary>
 释放资源时调用
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPClientConnector.GetConnectorDetail0">
 <summary>
 创建一个连接头像详情对象，包含用于描述当前连接通道的信息
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPClientConnector.GetConnectorType">
 <summary>
 返回此通道的类路径
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail">
 <summary>
 表示一个TCP服务器节点下的客户端通道详情
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.Key">
 <summary>
 表示一个代表在TCP服务器节点下的唯一键值，通过此键值查询通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.Remote">
 <summary>
 远程客户端身份
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.Local">
 <summary>
 本地端点
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.ClientID">
 <summary>
 客户端唯一号
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.#ctor(System.String)">
 <summary>
 指定一个唯一Key值，用于表示一个服务器下的节点客户端
 </summary>
 <param name="skey"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.#ctor(System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Int64)">
 <summary>
 指定一个唯一Key值，用于表示一个服务器下的节点客户端
 </summary>
 <param name="skey">指示此节点的唯一Key值</param>
 <param name="_remote">远程客户端身份</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.GetAssemblyName">
 <summary>
 获取连接通道所在的程序集
 </summary>
 <returns>程序集名称</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.Equals(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 进行比较，看是否指向同一个客户端节点
 </summary>
 <param name="other"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.GetKey">
 <summary>
 获取一个关于客户端节点的Key值
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.Client.TCPServerClientDetail.ToString">
 <summary>
 打印此详情所指示的连接信息
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Connector.TCPServer.IDoNetTCPServerChannel.ServerConnector">
 <summary>
 和通道相关联的连接器处理类
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.lockobj">
 <summary>
 用于单例模式加锁的
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.mTCPServerAllocator">
 <summary>
 用于生成TCP Server的分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.GetAllocator">
 <summary>
 获取用于生成TCPServer的分配器
 </summary>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.ClientID">
 <summary>
 所有客户端的ID
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.GetClientKey(DotNetty.Transport.Channels.IChannel,System.Int64@)">
 <summary>
 获取客户端的Key值
 </summary>
 <param name="channel"></param>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.mServerBootstrap">
 <summary>
 服务器快速启动器
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.mTCPClientHandler">
 <summary>
 用于管理tcp客户端创建的处理程序
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.#ctor">
 <summary>
 类初始化，初始化 ServerBootstrap
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.GetConnectorTypeName">
 <summary>
 获取分配器可分配的连接器类全名
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.GetNewConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 创建一个新的连接通道
 </summary>
 <param name="detail"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerAllocator.shutdownGracefully">
 <summary>
 关闭这个连接通道分配器
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPServer.TcpServerSocketChannelEx">
 <summary>
 处理服务器连接的通道类
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector">
 <summary>
 TCPServer监听通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector._ServerChannel">
 <summary>
 服务器监听通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector._Detail">
 <summary>
 表示当前监听器的信息
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.mLocal">
 <summary>
 本地端点信息
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.#ctor(System.Threading.Tasks.Task{DotNetty.Transport.Channels.IChannel},DoNetDrive.Core.Connector.TCPServer.TCPServerDetail)">
 <summary>
 初始化服务器监听通道
 </summary>
 <param name="chl">通道的绑定任务</param>
 <param name="detail">通道的详情描述类</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.BindOver(System.Threading.Tasks.Task{DotNetty.Transport.Channels.IChannel})">
 <summary>
 绑定完毕
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.LocalAddress">
 <summary>
 返回本地绑定信息
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.GetConnectorType">
 <summary>
 获取此通道的连接器类型
 </summary>
 <returns>连接器类型</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.CloseConnector">
 <summary>
 关闭连接
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.GetInitializationStatus">
 <summary>
 获取初始化通道状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.Release0">
 <summary>
 释放资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.GetConnectorDetail">
 <summary>
 获取关于本通道的详情
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.GetByteBufAllocator">
 <summary>
 获取连接通道支持的bytebuf分配器
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.WriteByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将生成的bytebuf写入到通道中
 写入完毕后自动释放
 </summary>
 <param name="buf"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerConnector.GetEventLoop">
 <summary>
 获取此通道所依附的事件循环通道
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail">
 <summary>
 表示一个TCP服务器的连接通道信息
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.LocalAddr">
 <summary>
 表示一个IP地址，IPV4，IPV6都可以
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.LocalPort">
 <summary>
 表示本地监听的端口号
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.IsSSL">
 <summary>
 是否启用SSL安全连接
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.Certificate">
 <summary>
 用于SSL安全连接的数字证书
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.SSLStreamFactory">
 <summary>
 用于创建SSL安全套接字的流工厂
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.#ctor(System.Int32)">
 <summary>
 初始化详情，本地地址指向 "0.0.0.0"
 </summary>
 <param name="Port">本地监听端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.#ctor(System.String,System.Int32)">
 <summary>
 初始化详情
 </summary>
 <param name="Addr">本地监听地址</param>
 <param name="Port">本地监听端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.#ctor(System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
 <summary>
 初始化详情
 </summary>
 <param name="Addr">本地监听地址</param>
 <param name="Port">本地监听端口</param>
 <param name="bSSL">是否开启SSL</param>
 <param name="oX509">使用的证书</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.#ctor(System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Func{System.IO.Stream,System.Net.Security.SslStream})">
 <summary>
 初始化详情
 </summary>
 <param name="Addr">本地监听地址</param>
 <param name="Port">本地监听端口</param>
 <param name="bSSL">是否开启SSL</param>
 <param name="oX509">使用的证书</param>
 <param name="oSSLFac">用于创建SSL安全套接字的流工厂</param>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.Equals(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 进行比较，看是否指向同一个服务端点
 </summary>
 <param name="other"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.GetKey">
 <summary>
 获取一个关于服务端点的Key值
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.GetAssemblyName">
 <summary>
 获取连接通道所在的程序集
 </summary>
 <returns>程序集名称</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.TCPServer.TCPServerDetail.ToString">
 <summary>
 打印此详情所指示的连接信息
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.TCPServer.TcpServerSocketChannelLibuv">
 <summary>
 处理服务器连接的通道类
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.ConnectorStatus_Invalid">
 <summary>
 指示通道已失效的状态
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ConnectorStatus_Invalid.Invalid">
 <summary>
 指示通道已失效
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorStatus_Invalid.Status">
 <summary>
 获取当前状态的描述
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorStatus_Invalid.CheckStatus(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 检查状态是否需要变化
 </summary>
 <param name="connector"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.ConnectorStatus_Bind">
 <summary>
 指示通道已绑定本地端口
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ConnectorStatus_Bind.Bind">
 <summary>
 指示通道正在绑定本地端口的状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorStatus_Bind.CheckStatus(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 检查状态是否需要变化
 </summary>
 <param name="connector"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.ConnectorStatus_Bind.Status">
 <summary>
 获取当前状态的描述
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.UDP.UDPAllocator">
 <summary>
 创建分配一个UDP连接通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPAllocator.lockobj">
 <summary>
 用于单例模式加锁的
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPAllocator.mAllocator">
 <summary>
 用于生成TCP Server的分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPAllocator.GetAllocator">
 <summary>
 获取用于生成TCPServer的分配器
 </summary>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPAllocator.mServerList">
 <summary>
 保存有UDPServer的服务器列表
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPAllocator.mUDPBootstrap">
 <summary>
 用于创建UDP通道的快速启动器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPAllocator.#ctor">
 <summary>
 创建一个UDP分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPAllocator.shutdownGracefully">
 <summary>
 关闭这个连接通道分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPAllocator.GetConnectorTypeName">
 <summary>
 获取分配器可分配的连接器类全名
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPAllocator.GetNewConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 创建一个新的连接通道
 </summary>
 <param name="detail"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPAllocator.GetNewUDPServer(DoNetDrive.Core.Connector.UDP.UDPServerDetail)">
 <summary>
 创建一个UDP服务器通道
 </summary>
 <param name="dtl"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPAllocator.GetIPAddress(System.String)">
 <summary>
 将一个地址转换为IPAddress
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPClientDetail.#ctor(System.String,System.Int32)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPClientDetail.#ctor(System.String,System.Int32,System.String,System.Int32)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPClientDetail.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
 <summary>
 初始化详情
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
 <param name="bSSL">是否开启SSL</param>
 <param name="oX509">使用的证书</param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPClientDetail.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Func{System.IO.Stream,System.Net.Security.SslStream})">
 <summary>
 初始化详情
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
 <param name="bSSL">是否开启SSL</param>
 <param name="oX509">使用的证书</param>
 <param name="oSSLFac">用于创建SSL安全套接字的流工厂</param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPClientDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="T:DoNetDrive.Core.Connector.UDP.UDPClientDetail_ReadOnly">
 <summary>
 只读的UDP连接器客户端详情
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPClientDetail_ReadOnly.#ctor(DoNetDrive.Core.Connector.TCPClient.TCPClientDetail)">
 <summary>
 初始化连接器详细
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPClientDetail_ReadOnly.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="T:DoNetDrive.Core.Connector.UDP.UDPServerChannelHandler">
 <summary>
 UDP Server的 Netty 通道处理器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerChannelHandler.Release">
 <summary>
 释放关联
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerChannelHandler.ChannelRead0(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Transport.Channels.Sockets.DatagramPacket)">
 <summary>
 接收到数据事件
 </summary>
 <param name="ctx"></param>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerChannelHandler.UserEventTriggered(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)">
 <summary>
 自定义用户事件，在这里用于接收超时事件
 </summary>
 <param name="ctx"></param>
 <param name="evt"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector">
 <summary>
 附属于UDPServer Connector 下的UDP子节点，每个子节点对应了一个远程主机
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.RemoteIP">
 <summary>
 记录远程主机的IP
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector._EventLoop">
 <summary>
 此通道所在的EventLoop
 </summary>
</member>
<member name="E:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.ConnectorDisposeEvent">
 <summary>
 通道销毁事件
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.#ctor(System.Net.EndPoint,DotNetty.Transport.Channels.IChannel,DoNetDrive.Core.Connector.UDP.UDPServerDetail)">
 <summary>
 通过远程主机和本地绑定的Netty通道初始化此类
 </summary>
 <param name="Remote"></param>
 <param name="server"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.ConnectSuccess">
 <summary>
 远程连接成功
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.GetConnectorType">
 <summary>
 返回此通道的类路径
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.GetInitializationStatus">
 <summary>
 返回此通道的初始化状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.GetEventLoop">
 <summary>
 获取此通道所依附的事件循环通道
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.channelRead0(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Buffers.IByteBuffer)">
 <summary>
 接收到数据
 </summary>
 <param name="ctx"></param>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.WriteByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将生成的bytebuf写入到通道中
 写入完毕后自动释放
 </summary>
 <param name="buf"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.GetConnectorDetail0">
 <summary>
 创建一个连接头像详情对象，包含用于描述当前连接通道的信息
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.ConnectFail0">
 <summary>
 当连接通道连接已失效时调用
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.ConnectSuccess0">
 <summary>
 表示通道建立完毕时调用
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.CloseConnector">
 <summary>
 关闭连接
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerClientConnector.Release1">
 <summary>
 释放资源
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.UDP.UDPServerConnector">
 <summary>
 表示一个UDP监听服务器，当收到一个新的请求时，将创建一个UDPClient通道用户处理请求
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPServerConnector._Channel">
 <summary>
 服务器监听通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPServerConnector._Detail">
 <summary>
 表示当前监听器的信息
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPServerConnector.mHandler">
 <summary>
 UDP服务器的通道处理器
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPServerConnector.ChildChannel">
 <summary>
 通道的子节点
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPServerConnector.BroadcastChannel">
 <summary>
 广播的通道
 </summary>
</member>
<member name="E:DoNetDrive.Core.Connector.UDP.UDPServerConnector.ConnectorDisposeEvent">
 <summary>
 通道销毁事件
 </summary>
 <param name="dtl"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.#ctor(System.Threading.Tasks.Task{DotNetty.Transport.Channels.IChannel},DoNetDrive.Core.Connector.UDP.UDPServerDetail)">
 <summary>
 初始化通道
 </summary>
 <param name="tsk"></param>
 <param name="serverdtl"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.BindOver(System.Threading.Tasks.Task{DotNetty.Transport.Channels.IChannel})">
 <summary>
 绑定完毕
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.LocalAddress">
 <summary>
 返回本地绑定信息
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.GetConnectorType">
 <summary>
 获取此通道的连接器类型
 </summary>
 <returns>连接器类型</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.CloseConnector">
 <summary>
 关闭连接
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.CloseClientConnector">
 <summary>
 关闭所有子节点通道
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.AddClientConnector(System.String,System.Net.EndPoint)">
 <summary>
 给通道添加一个UDP子节点
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.ConnectorDisposeEventCallBlack(DoNetDrive.Core.Connector.UDP.UDPServerClientConnector)">
 <summary>
 回调解除通道绑定
 </summary>
 <param name="client"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.GetInitializationStatus">
 <summary>
 获取初始化通道状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.Release0">
 <summary>
 释放资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.GetConnectorDetail">
 <summary>
 获取关于本通道的详情
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.GetByteBufAllocator">
 <summary>
 获取连接通道支持的bytebuf分配器
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.WriteByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将生成的bytebuf写入到通道中
 写入完毕后自动释放
 </summary>
 <param name="buf"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.GetEventLoop">
 <summary>
 获取此通道所依附的事件循环通道
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.ChannelRead0(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Transport.Channels.Sockets.DatagramPacket)">
 <summary>
 接收到数据事件
 </summary>
 <param name="ctx"></param>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerConnector.UserEventTriggered(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)">
 <summary>
 自定义用户事件，在这里用于接收超时事件
 </summary>
 <param name="ctx"></param>
 <param name="evt"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.UDP.UDPServerDetail">
 <summary>
 指示一个UDP服务器的详细信息
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPServerDetail.LocalAddr">
 <summary>
 连接远程服务器的本地IP
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.UDP.UDPServerDetail.LocalPort">
 <summary>
 连接远程服务器的本地端口
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerDetail.#ctor(System.Int32)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="ilocalPort">指定本地端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerDetail.#ctor(System.String,System.Int32)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerDetail.GetAssemblyName">
 <summary>
 获取连接通道所在的程序集
 </summary>
 <returns>程序集名称</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerDetail.Equals(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 用来比较此连接通道是否为同一个
 </summary>
 <param name="other"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerDetail.GetKey">
 <summary>
 获取一个用于界定此通道的唯一Key值
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.UDP.UDPServerDetail.ToString">
 <summary>
 打印此详情所指示的连接信息
 </summary>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientAllocator.lockobj">
 <summary>
 用于单例模式加锁的
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientAllocator.mWebSocketClientAllocator">
 <summary>
 用于生成WebSocketClient的分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientAllocator.GetAllocator">
 <summary>
 获取用于生成WebSocketClient的分配器
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientAllocator.#ctor">
 <summary>
 初始化分配器，建立 Bootstrap ，并分配 EventLoopGroup
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientAllocator.shutdownGracefully">
 <summary>
 关闭这个连接通道分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientAllocator.GetConnectorTypeName">
 <summary>
 获取分配器可分配的连接器类全名
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientAllocator.GetNewConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 创建一个新的连接通道
 </summary>
 <param name="detail"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientAllocator.SetTCPInitializerPar(System.Net.IPEndPoint,DoNetDrive.Core.Connector.TCPClient.TCPClientDetail)">
 <summary>
 设置初始化参数
 </summary>
 <param name="detail"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector">
 <summary>
 用于和TCP Server进行通讯的TCP Client
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector._WebsocketPath">
 <summary>
 Websocket 地址
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector._WebsocketHandler">
 <summary>
 Websocket Client 处理器
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector.WebsocketPath">
 <summary>
 Websocket 地址
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector.#ctor(DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientAllocator,DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail)">
 <summary>
 初始化TCP客户端对象
 </summary>
 <param name="acr">通道分配器</param>
 <param name="detail">标识此通道的信息类</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector.GetConnectorType">
 <summary>
 返回此通道的类路径
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector.AddChannelHandler">
 <summary>
 添加通道处理器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector.WriteByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将生成的bytebuf写入到通道中
 写入完毕后自动释放
 </summary>
 <param name="buf"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector.HandshakeOver(System.Threading.Tasks.Task)">
 <summary>
 握手完毕
 </summary>
 <param name="oTsk"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientConnector.Release1">
 <summary>
 释放资源
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail.Path">
 <summary>
 路径
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail.#ctor(System.String,System.Int32)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="sHost">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail.#ctor(DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="oWebSocketClient">远程服务器的详情</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail.#ctor(System.String,System.Int32,System.String,System.Int32)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="sHost">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2)">
 <summary>
 初始化详情
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
 <param name="bSSL">是否开启SSL</param>
 <param name="oX509">使用的证书</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail.#ctor(System.String,System.Int32,System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Func{System.IO.Stream,System.Net.Security.SslStream},System.String)">
 <summary>
 初始化详情
 </summary>
 <param name="sAddr">远程服务器的IP或域名</param>
 <param name="iPort">远程服务器的监听端口</param>
 <param name="slocal">指定本地IP</param>
 <param name="ilocalPort">指定本地端口</param>
 <param name="bSSL">是否开启SSL</param>
 <param name="oX509">使用的证书</param>
 <param name="oSSLFac">用于创建SSL安全套接字的流工厂</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail_Readonly.#ctor(DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientDetail)">
 <summary>
 初始化连接器详细
 </summary>
 <param name="oDtl">远程服务器的详情</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientHandler.Release">
 <summary>
 释放关联
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientHandler.ChannelInactive(DotNetty.Transport.Channels.IChannelHandlerContext)">
 <summary>
 不活跃事件，一般就是关闭连接
 Websocket 断开连接
 </summary>
 <param name="ctx"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientHandler.ChannelReadComplete(DotNetty.Transport.Channels.IChannelHandlerContext)">
 <summary>
 当通道全部读取完毕后发生的事件
 </summary>
 <param name="context"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientHandler.ExceptionCaught(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)">
 <summary>
 意外发生错误
 </summary>
 <param name="ctx"></param>
 <param name="ex"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientHandshakeHandler.HandshakeCompletion">
 <summary>
 指示Websocket Client 握手是否完成
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientHandshakeHandler.ChannelActive(DotNetty.Transport.Channels.IChannelHandlerContext)">
 <summary>
 Websocket 连接成功，握手完毕
 </summary>
 <param name="ctx"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Client.WebSocketClientHandshakeHandler.ExceptionCaught(DotNetty.Transport.Channels.IChannelHandlerContext,System.Exception)">
 <summary>
 意外发生错误
 </summary>
 <param name="ctx"></param>
 <param name="ex"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector">
 <summary>
 表示一个WebSocket Server下的客户端节点连接通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector._Handshaker">
 <summary>
 从 HTTP 到 WebSocket 协议升级处理器
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector._HandshakeIsCompleted">
 <summary>
 检查握手是否成功
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.RequestURL">
 <summary>
 本次请求的URL地址参数
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.#ctor(System.String,DotNetty.Transport.Channels.IChannel,System.Int64)">
 <summary>
 创建一个客户端
 </summary>
 <param name="sKey"></param>
 <param name="channel"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.channelRead0(DotNetty.Transport.Channels.IChannelHandlerContext,System.Object)">
 <summary>
 接收到数据
 </summary>
 <param name="ctx"></param>
 <param name="msg"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.HandleHttpRequest(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http.IFullHttpRequest)">
 <summary>
 处理 HTTP 握手请求
 </summary>
 <param name="ctx"></param>
 <param name="req"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.HandshakeOver(System.Threading.Tasks.Task)">
 <summary>
 握手完毕
 </summary>
 <param name="oTsk"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.HandleWebSocketFrame(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http.WebSockets.WebSocketFrame)">
 <summary>
 处理 Websocket  数据包
 </summary>
 <param name="ctx"></param>
 <param name="frame"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.SendHttpResponse(DotNetty.Transport.Channels.IChannelHandlerContext,DotNetty.Codecs.Http.IFullHttpRequest,DotNetty.Codecs.Http.IFullHttpResponse)">
 <summary>
 发送HTTP消息
 </summary>
 <param name="ctx"></param>
 <param name="req"></param>
 <param name="res"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.GetWebSocketLocation(DotNetty.Codecs.Http.IFullHttpRequest)">
 <summary>
 生成WebSocket的有效URL路径
 </summary>
 <param name="req"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.WriteByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将生成的bytebuf写入到通道中
 写入完毕后自动释放
 </summary>
 <param name="buf"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.GetConnectorDetail0">
 <summary>
 创建一个连接头像详情对象，包含用于描述当前连接通道的信息
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientConnector.GetConnectorType">
 <summary>
 返回此通道的类路径
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientChannelInitializer">
 <summary>
 WebSocket Server下的 客户端通道初始化类，在此类中初始化  TCPServer.Client.TCPClientConnector 类
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientChannelInitializer.InitChannel(DotNetty.Transport.Channels.IChannel)">
 <summary>
 初始化服务器客户端(子节点)
 </summary>
 <param name="channel"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientDetail">
 <summary>
 指示一个WebSocket Server的客户端节点
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientDetail.RequestURL">
 <summary>
 请求的URL地址信息
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientDetail.#ctor(System.String)">
 <summary>
 指定一个唯一Key值，用于表示一个服务器下的节点客户端
 </summary>
 <param name="skey"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientDetail.#ctor(System.String,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Int64)">
 <summary>
 指定一个唯一Key值，用于表示一个服务器下的节点客户端
 </summary>
 <param name="skey">指示此节点的唯一Key值</param>
 <param name="_remote">远程客户端身份</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.Client.WebSocketServerClientDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="T:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator">
 <summary>
 WebSocket 服务器分配器
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.lockobj">
 <summary>
 用于单例模式加锁的
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.mWebSocketServerAllocator">
 <summary>
 用于生成WebSocket服务器的分配器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.GetAllocator">
 <summary>
 获取用于生成WebSocket服务器的分配器
 </summary>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.ClientID">
 <summary>
 所有客户端的ID
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.GetClientKey(DotNetty.Transport.Channels.IChannel,System.Int64@)">
 <summary>
 获取客户端的Key值
 </summary>
 <param name="channel"></param>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.mServerBootstrap">
 <summary>
 服务器快速启动器
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.mWebSocketClientHandler">
 <summary>
 用于管理tcp客户端创建的处理程序
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.#ctor">
 <summary>
 类初始化，初始化 ServerBootstrap
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.GetConnectorTypeName">
 <summary>
 获取分配器可分配的连接器类全名
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.GetNewConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 创建一个新的连接通道
 </summary>
 <param name="detail"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerAllocator.shutdownGracefully">
 <summary>
 关闭这个连接通道分配器
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerConnector">
 <summary>
 WebSocket Server 监听通道
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerConnector.#ctor(System.Threading.Tasks.Task{DotNetty.Transport.Channels.IChannel},DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerDetail)">
 <summary>
 初始化服务器监听通道
 </summary>
 <param name="chl">通道的绑定任务</param>
 <param name="detail">通道的详情描述类</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerConnector.GetConnectorType">
 <summary>
 获取此通道的连接器类型
 </summary>
 <returns>连接器类型</returns>
</member>
<member name="T:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerDetail">
 <summary>
 表示者一个WebSocketServer的连接通道参数
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerDetail.WebsocketPath">
 <summary>
 WebSocket 服务器监听的路径
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerDetail.#ctor(System.Int32)">
 <summary>
 初始化详情，本地地址指向 "0.0.0.0"
 </summary>
 <param name="Port">本地监听端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerDetail.#ctor(System.String,System.Int32)">
 <summary>
 初始化详情
 </summary>
 <param name="Addr">本地监听地址</param>
 <param name="Port">本地监听端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerDetail.#ctor(System.String,System.Int32,System.String)">
 <summary>
 初始化详情
 </summary>
 <param name="Addr">本地监听地址</param>
 <param name="Port">本地监听端口</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerDetail.#ctor(System.String,System.Int32,System.Boolean,System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
 <summary>
 初始化详情
 </summary>
 <param name="Addr">本地监听地址</param>
 <param name="Port">本地监听端口</param>
 <param name="bSSL">是否开启SSL</param>
 <param name="oX509">使用的证书</param>
</member>
<member name="M:DoNetDrive.Core.Connector.WebSocket.Server.WebSocketServerDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 </summary>
 <returns>类名的全名</returns>
</member>
<member name="T:DoNetDrive.Core.Connector.INConnector">
 <summary>
 所有连接器的顶级接口
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.GetConnectorType">
 <summary>
 获取此通道的连接器类型
 </summary>
 <returns>连接器类型</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.GetConnectorDetail">
 <summary>
 获取连接器的详情对象
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.CheckIsInvalid">
 <summary>''' 检查通道是否已失效 1分钟无连接，无命令任务则自动失效
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.GetCommandCount">
 <summary>
 获取通道中的命令队列数量
 </summary>
 <returns>命令队列数量</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.CommandListIsEmpty">
 <summary>
 命令队列是否为空
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.AddCommand(DoNetDrive.Core.Command.INCommandRuntime)">
 <summary>
 将一个命令添加到本通道的命令队列中
 </summary>
 <param name="cd">命令封装类，执行具体指令</param>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.AddRequestHandle(DoNetDrive.Core.Command.INRequestHandle)">
 <summary>
 当需要解析监控指令时，添加数据包解析器到解析器列表中
 </summary>
 <param name="handle">数据包解析器</param>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.RemoveRequestHandle(System.Type)">
 <summary>
 从连接通道中删除指定类型的数据包解析器
 </summary>
 <param name="handle"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.IsForciblyConnect">
 <summary>
  判断此通道是否保持连接，即通道在发送完毕命令后保持连接
 </summary>
 <returns> true 表示通道保持打开</returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.OpenForciblyConnect">
 <summary>
 设定此连接器通道为保持打开状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.CloseForciblyConnect">
 <summary>
 禁止此连接器通道为保持连接状态，即命令发送完毕后关闭连接。
 </summary>
</member>
<member name="P:DoNetDrive.Core.Connector.INConnector.IsInvalid">
 <summary>
 确定通道是否已失效
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.IsActivity">
 <summary>
 通道是否为活动状态(已连接)
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.LocalAddress">
 <summary>
 获取本地绑定地址
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.GetStatus">
 <summary>
 获取此连接通道的状态
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.StopCommand(DoNetDrive.Core.Command.INCommandDetail)">
 <summary>
 停止指定类型的命令，终止命令继续执行
 </summary>
 <param name="cdt">命令详情，如果为Null表示停止此通道中的所有命令</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.UpdateActivityTime">
 <summary>
 更新通道活动时间
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.GetByteBufAllocator">
 <summary>
 获取连接通道支持的bytebuf分配器
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.WriteByteBuf(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将生成的bytebuf写入到通道中
 写入完毕后自动释放
 </summary>
 <param name="buf"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.GetEventLoop">
 <summary>
 获取此通道所依附的事件循环通道
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnector.Close">
 <summary>
 关闭链接
 </summary>
</member>
<member name="T:DoNetDrive.Core.Connector.INConnectorDetail">
 <summary>
 连接指示接口，用来告诉连接工厂应该使用哪种连接器连接对端。
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorDetail.GetAssemblyName">
 <summary>
 获取连接通道所在的程序集
 例如：DoNetDrive.Core
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorDetail.GetTypeName">
 <summary>
 获取连接通道的类名
 例如：Connector.TCPClient.TCPClientConnector
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Connector.INConnectorDetail.Timeout">
 <summary>
 连接器连接到对端时最大等待时间，单位毫秒
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Connector.INConnectorDetail.RestartCount">
 <summary>
 连接器连接到对端失败后，最大重试次数
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorDetail.GetKey">
 <summary>
 获取一个用于界定此通道的唯一Key值
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorDetail.SetError(System.Exception)">
 <summary>
 可以设置一个错误信息，当错误发生时，保存在此处
 </summary>
 <param name="err"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorDetail.GetError">
 <summary>
 当错误发生时，获取一个错误信息
 </summary>
 <returns></returns>
</member>
<member name="P:DoNetDrive.Core.Connector.INConnectorDetail.IsFaulted">
 <summary>
 表示是否包含错误信息
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Connector.INConnectorStatus">
 <summary>
 连接器的状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorStatus.Status">
 <summary>
 获取当前状态的描述
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Connector.INConnectorStatus.CheckStatus(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 检查状态是否需要变化
 </summary>
 <param name="connector"></param>
</member>
<member name="T:DoNetDrive.Core.Connector.INConnectorEvent">
 <summary>
 当通讯连接器有事件需要通知时，调用对应的事件函数
 </summary>
</member>
<member name="E:DoNetDrive.Core.Connector.INConnectorEvent.ConnectorErrorEvent">
 <summary>
 连接通道发生错误时触发事件
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.INConnectorEvent.ConnectorConnectedEvent">
 <summary>
 连接通道连接建立成功时发生
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.INConnectorEvent.ConnectorClosedEvent">
 <summary>
 连接通道连接关闭时发生
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.INConnectorEvent.TransactionMessage">
 <summary>
 事务消息，有些命令发生后会需要异步等待对端传回结果，结果将自动序列化为事物消息，并触发此事件
 </summary>
 <param name="connector">触发事件的连接通道信息</param>
 <param name="EventData">事件所包含数据</param>
</member>
<member name="E:DoNetDrive.Core.Connector.INConnectorEvent.ClientOnline">
 <summary>
 客户端上线
 </summary>
 <param name="sender">触发事件的连接通道信息</param>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="E:DoNetDrive.Core.Connector.INConnectorEvent.ClientOffline">
 <summary>
 客户端离线
 </summary>
 <param name="sender">触发事件的连接通道信息</param>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="T:DoNetDrive.Core.Connector.INFireConnectorEvent">
 <summary>
 触发事件 ,用于激活 INConnectorEvent 接口定义的事件
 </summary>
</member>
<member name="M:DoNetDrive.Core.Connector.INFireConnectorEvent.FireConnectorErrorEvent(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 连接通道发生错误时触发事件
 </summary>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="M:DoNetDrive.Core.Connector.INFireConnectorEvent.FireConnectorConnectedEvent(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 连接通道连接建立成功时发生
 </summary>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="M:DoNetDrive.Core.Connector.INFireConnectorEvent.FireConnectorClosedEvent(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 连接通道连接关闭时发生
 </summary>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="M:DoNetDrive.Core.Connector.INFireConnectorEvent.FireTransactionMessage(DoNetDrive.Core.Data.INData)">
 <summary>
 事务消息，对端主动传送到本地的请求数据，此数据解码后产生此事件
 </summary>
 <param name="EventData"></param>
</member>
<member name="M:DoNetDrive.Core.Connector.INFireConnectorEvent.FireClientOnline(DoNetDrive.Core.Connector.ServerEventArgs)">
 <summary>
 客户端上线
 </summary>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="M:DoNetDrive.Core.Connector.INFireConnectorEvent.FireClientOffline(DoNetDrive.Core.Connector.ServerEventArgs)">
 <summary>
 客户端离线
 </summary>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="T:DoNetDrive.Core.Connector.ServerEventArgs">
 <summary>
 服务器事件参数
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ServerEventArgs.ClientKey">
 <summary>
 客户端的key值，后续通过此值和其通讯
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ServerEventArgs.Local">
 <summary>
 服务器本地IP信息(仅供查看，不可修改)
 </summary>
</member>
<member name="F:DoNetDrive.Core.Connector.ServerEventArgs.Remote">
 <summary>
 远程计算机IP信息(仅供查看，不可修改)
 </summary>
</member>
<member name="T:DoNetDrive.Core.ConnectorAllocator">
 <summary>
 基于命令模式。
 用于协调连接通道和命令还有调用者之间的关系
 将命令推送到指定的连接通道，并监督连接通道的运转情况。
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorAllocator.DefaultConnectorFactory">
 <summary>
 默认的通道生成工厂
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorAllocator.DefaultEventLoopGroupTaskCount">
 <summary>
 默认的事件循环数量
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorAllocator.staticConnectorAllocator">
 <summary>
 单例模式中的全局变量
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorAllocator.lockObj">
 <summary>
 单例模式中所用到的锁
 </summary>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.GetAllocator">
 <summary>
 获取分配器的唯一实例
 </summary>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.ConnectorAllocator.ConnectorFactory">
 <summary>
 用于生成通道的工厂
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorAllocator.Connectors">
 <summary>
 保存所有的连接通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorAllocator.WorkEventLoopGroup">
 <summary>
 连接分配器的工作线程，用于检查连接，分配
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorAllocator._IsRelease">
 <summary>
 是否已释放
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorAllocator.mManagers">
 <summary>
 连接管理器工厂
 </summary>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.CommandCompleteEvent">
 <summary>
 当命令完成时，会触发此函数回调
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.CommandProcessEvent">
 <summary>
 命令进度指示，当命令开始执行会连续触发，汇报命令执行的进度
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.CommandErrorEvent">
 <summary>
 发生错误时触发事件，一般是连接握手失败，串口不存在，usb不存在，没有写文件权限等
 还有可能是用户调用Stop指令强制停止命令
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.CommandTimeout">
 <summary>
 命令超时时，触发此回到函数
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.AuthenticationErrorEvent">
 <summary>
 身份鉴权时发生错误的事件,
 一般发生于密码错误，校验失败等情况！
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.ConnectorErrorEvent">
 <summary>
 连接通道发生错误时触发事件
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.ConnectorConnectedEvent">
 <summary>
 连接通道连接建立成功时发生
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.ConnectorClosedEvent">
 <summary>
 连接通道连接关闭时发生
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.TransactionMessage">
 <summary>
 事务消息，有些命令发生后会需要异步等待对端传回结果，结果将自动序列化为事物消息，并触发此事件
 </summary>
 <param name="connector">触发事件的连接通道信息</param>
 <param name="EventData">事件所包含数据</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.ClientOnline">
 <summary>
 客户端上线
 </summary>
 <param name="sender">触发事件的连接通道信息</param>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.ClientOffline">
 <summary>
 客户端离线
 </summary>
 <param name="sender">触发事件的连接通道信息</param>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="E:DoNetDrive.Core.ConnectorAllocator.DisposeCallBlack">
 <summary>
 表示对象已完成销毁工作
 </summary>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.IsRelease">
 <summary>
 是否已释放
 </summary>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.#ctor">
 <summary>
 初始化分配器参数
 </summary>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.GetOrCreateConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 获取一个已存在的通道，不存在时则创建一个
 </summary>
 <param name="cdtl"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.OpenConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 强制打开一个连接通道
 </summary>
 <param name="connectDtl">表示连接通道的信息</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.OpenForciblyConnect(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 强制打开一个连接通道
 </summary>
 <param name="connectDtl">表示连接通道的信息</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.CloseConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 强制关闭通道连接
 </summary>
 <param name="connectDtl">表示连接通道的信息</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.GetConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 获取一个连接通道
 </summary>
 <param name="connectDtl"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.RemoveConnector(System.String,DoNetDrive.Core.Connector.INConnector)">
 <summary>
 删除一个通道
 </summary>
 <param name="sKey"></param>
 <param name="oConn"></param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.AddConnector(System.String,DoNetDrive.Core.Connector.INConnector)">
 <summary>
 添加一个连接通道
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.GetAllConnectorKeys">
 <summary>
 获取所有在线的连接通道的Key
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.AddCommand(DoNetDrive.Core.Command.INCommand)">
 <summary>
 添加一个指令到分配器，如果通道已存在将推送到通道上，不存在则创建一个通道。
 </summary>
 <param name="cmd">需要执行的命令</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.StopCommand(DoNetDrive.Core.Command.INCommandDetail)">
 <summary>
 停止一个命令，如果命令处于队列中，不管是正在排队，还是已经在处理，都可以立刻停止
 </summary>
 <param name="cmdDetail">停止具有相同命令信息的所有指令</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.AddEventListener(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 添加连接通道的事件绑定
 </summary>
 <param name="conn"></param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.RemoveEventListener(DoNetDrive.Core.Connector.INConnector)">
 <summary>
 解除连接通道的事件绑定
 </summary>
 <param name="conn"></param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireCommandCompleteEvent(System.Object,DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 当命令完成时，会触发此函数回调
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireCommandProcessEvent(System.Object,DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 命令进度指示，当命令开始执行会连续触发，汇报命令执行的进度
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireCommandErrorEvent(System.Object,DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 发生错误时触发事件，一般是连接握手失败，串口不存在，usb不存在，没有写文件权限等
 还有可能是用户调用Stop指令强制停止命令
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireCommandTimeout(System.Object,DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 命令超时时，触发此回到函数
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireAuthenticationErrorEvent(System.Object,DoNetDrive.Core.Command.CommandEventArgs)">
 <summary>
 身份鉴权时发生错误的事件,
 一般发生于密码错误，校验失败等情况！
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="e">事件参数，包含此事件所代表的命令信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireConnectorErrorEvent(System.Object,DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 连接通道发生错误时触发事件
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireConnectorConnectedEvent(System.Object,DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 连接通道连接建立成功时发生
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireConnectorClosedEvent(System.Object,DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 连接通道连接关闭时发生
 </summary>
 <param name="sender">触发事件的调用者</param>
 <param name="connector">触发事件的连接通道信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireTransactionMessage(DoNetDrive.Core.Connector.INConnectorDetail,DoNetDrive.Core.Data.INData)">
 <summary>
 事务消息，有些命令发生后会需要异步等待对端传回结果，结果将自动序列化为事物消息，并触发此事件
 </summary>
 <param name="connector">触发事件的连接通道信息</param>
 <param name="EventData">事件所包含数据</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireClientOnline(System.Object,DoNetDrive.Core.Connector.ServerEventArgs)">
 <summary>
 客户端上线
 </summary>
 <param name="sender">触发事件的连接通道信息</param>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.FireClientOffline(System.Object,DoNetDrive.Core.Connector.ServerEventArgs)">
 <summary>
 客户端离线
 </summary>
 <param name="sender">触发事件的连接通道信息</param>
 <param name="e">包含事件所代表的客户端及服务器信息</param>
</member>
<member name="M:DoNetDrive.Core.ConnectorAllocator.Dispose">
 <summary>
 释放所有线程，关闭所有通道，这个过程需要大概60秒
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorType.TCPClient">
 <summary>
 表示一个TCP 客户端连接通道，主动访问远程服务器
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorType.TCPServerClient">
 <summary>
 表示一个TCP Server 下的 客户端节点通道，由客户端主动访问本地服务器生成
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorType.UDPClient">
 <summary>
 UDP 节点通道，一个UDP Server下的UDP节点
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorType.UDPServer">
 <summary>
 表示本地的一个 UDP Server 通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorType.TCPServer">
 <summary>
 表示本地的一个TCP Server 通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorType.SerialPort">
 <summary>
 表示一个串口通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorType.WebSocketServer">
 <summary>
 表示一个WebSocket Server 通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorType.WebSocketServerClient">
 <summary>
 表示一个 WebSocket Server下的WebSocket 子节点通道
 </summary>
</member>
<member name="F:DoNetDrive.Core.ConnectorType.WebSocketClient">
 <summary>
 表示一个Websocket客户端
 </summary>
</member>
<member name="T:DoNetDrive.Core.Data.AbstractData">
 <summary>
 抽象INData接口，统一GetBytes的实现
 </summary>
</member>
<member name="M:DoNetDrive.Core.Data.AbstractData.SetBytes(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将一个缓冲区 ByteBuf 设置到数据结构中
 </summary>
 <param name="databuf">需要设置到结构中的ByteBuf</param>
</member>
<member name="M:DoNetDrive.Core.Data.AbstractData.GetDataLen">
 <summary>
 获取数据的字节长度
 </summary>
 <returns>返回数据的字节长度</returns>
</member>
<member name="M:DoNetDrive.Core.Data.AbstractData.GetBytes">
 <summary>
 获取一个 ByteBuf 此 缓冲中包含了此数据结构的所有数据
 </summary>
 <returns>返回一个包含此结构的ByteBuf</returns>
</member>
<member name="M:DoNetDrive.Core.Data.AbstractData.GetBytes(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将数据序列化到指定的 ByteBuf 中
 </summary>
 <param name="databuf">具有足够缓冲空间的bytebuf</param>
 <returns>返回传入的bytebuf</returns>
</member>
<member name="M:DoNetDrive.Core.Data.INData.GetDataLen">
 <summary>
 获取数据的字节长度
 </summary>
 <returns>返回数据的字节长度</returns>
</member>
<member name="M:DoNetDrive.Core.Data.INData.SetBytes(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将一个缓冲区 ByteBuf 设置到数据结构中
 </summary>
 <param name="databuf">需要设置到结构中的ByteBuf</param>
</member>
<member name="M:DoNetDrive.Core.Data.INData.GetBytes">
 <summary>
 获取一个 ByteBuf 此 缓冲中包含了此数据结构的所有数据
 </summary>
 <returns>返回一个包含此结构的ByteBuf</returns>
</member>
<member name="M:DoNetDrive.Core.Data.INData.GetBytes(DotNetty.Buffers.IByteBuffer)">
 <summary>
 将数据序列化到指定的 ByteBuf 中
 </summary>
 <param name="databuf">具有足够缓冲空间的bytebuf</param>
 <returns>返回传入的bytebuf</returns>
</member>
<member name="T:DoNetDrive.Core.Util.BigInt">
 <summary>
 可处理12个字节的大数据类型
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.BigValue">
 <summary>
 最大包含12字节的整数
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.FloatDigit">
 <summary>
 小数点精度
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.Negative">
 <summary>
 符号位  0--正数，0x80--负数
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.UIntHeadValue">
 <summary>
 前4字节
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.IntHeadValue">
 <summary>
 前4字节
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.ByteValue_4">
 <summary>
 第4字节
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.Int64Value">
 <summary>
 后8字节
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.UInt64Value">
 <summary>
 后8字节
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.Int32Value">
 <summary>
 后4字节
 </summary>
</member>
<member name="F:DoNetDrive.Core.Util.BigInt.UInt32Value">
 <summary>
 后4字节
 </summary>
</member>
<member name="M:DoNetDrive.Core.Util.BigInt.toBytes(System.Int32)">
 <summary>
 获取指定字节数的数组
 </summary>
 <param name="iLen"></param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Util.BigInt.toBytes(DotNetty.Buffers.IByteBuffer,System.Int32)">
 <summary>
 将数值写入缓冲区
 </summary>
 <param name="buf"></param>
 <param name="iLen"></param>
</member>
<member name="M:DoNetDrive.Core.Util.BigInt.SetBytes(DotNetty.Buffers.IByteBuffer,System.Int32)">
 <summary>
 从缓冲区中读取指定字节
 </summary>
 <param name="buf"></param>
 <param name="iLen"></param>
</member>
<member name="T:DoNetDrive.Core.Factory.DefaultConnectorFactory">
 <summary>
 默认的连接通道分配工厂，可以分配一下几种类型的连接器
 TCPClient、TCPServer、UDPServer、UDPClient、SerialPort、WebSocketClient、WebSocketServer
 
 </summary>
</member>
<member name="M:DoNetDrive.Core.Factory.DefaultConnectorFactory.Release">
 <summary>
 释放资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.Factory.DefaultConnectorFactory.CreateConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 创建一个连接通道
 </summary>
 <param name="cd">包含一个描述连接通道详情的内容用于创建连接通道</param>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.Factory.INConnectorFactory">
 <summary>
 连接通道分配器工厂
 </summary>
</member>
<member name="M:DoNetDrive.Core.Factory.INConnectorFactory.CreateConnector(DoNetDrive.Core.Connector.INConnectorDetail)">
 <summary>
 创建一个连接通道
 </summary>
 <param name="cd">包含一个描述连接通道详情的内容用于创建连接通道</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Factory.INConnectorFactory.Release">
 <summary>
 释放资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.Packet.INPacket.GetPacketData(DotNetty.Buffers.IByteBufferAllocator)">
 <summary>
 获取数据包的打包后的ByteBuf，用于发送数据
 </summary>
 <param name="Allocator">用于分配ByteBuf的分配器</param>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.Packet.INPacket.ReleaseDataBuf">
 <summary>
 指示数据包可以释放数据缓冲区
 </summary>
</member>
<member name="T:DoNetDrive.Core.Packet.INPacketDecompile">
 <summary>
 用于将数据解析成指定格式的数据包的解析器
 </summary>
</member>
<member name="M:DoNetDrive.Core.Packet.INPacketDecompile.Decompile(DotNetty.Buffers.IByteBuffer,System.Collections.Generic.List{DoNetDrive.Core.Packet.INPacket})">
 <summary>
 将数据解析成特定的数据包，并返回结果
 </summary>
 <param name="buf">待解析数据缓冲区</param>
 <param name="retPacketList">已解析的包会放在这个列表中</param>
 <returns>解析出完整包则返回True</returns>
</member>
<member name="T:DoNetDrive.Core.TaskManage.AbstractTaskManage`1">
 <summary>
 表示着一组任务缓冲区，让任务在某个时间片内逐个执行
 </summary>
</member>
<member name="F:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.ScheduleTime">
 <summary>
 一组任务执行完毕后的休眠间隔
 </summary>
</member>
<member name="F:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.mEventLoop">
 <summary>
 任务循环器
 </summary>
</member>
<member name="F:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.Clients">
 <summary>
 客户端列表
 </summary>
</member>
<member name="F:DoNetDrive.Core.TaskManage.AbstractTaskManage`1._IsRelease">
 <summary>
 是否已释放
 </summary>
</member>
<member name="F:DoNetDrive.Core.TaskManage.AbstractTaskManage`1._ThreadID">
 <summary>
 管理器绑定的线程ID
 </summary>
</member>
<member name="F:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.DefaultTaskSleepTime">
 <summary>
 默认的任务休眠时间，单位毫秒
 </summary>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.#ctor(DotNetty.Transport.Channels.IEventLoop)">
 <summary>
 初始化缓冲区
 </summary>
 <param name="elp">任务循环器</param>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.#ctor(DotNetty.Transport.Channels.IEventLoop,System.TimeSpan)">
 <summary>
 初始化缓冲区
 </summary>
 <param name="elp">任务循环器</param>
 <param name="SleepTime">设定休眠间隔</param>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.GetEventLoop">
 <summary>
 返回管理器所使用的任务循环器
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.Add(`0)">
 <summary>
 添加一个客户端
 </summary>
 <param name="conn"></param>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.TaskCloseEvent(`0)">
 <summary>
 离线客户端回调
 </summary>
 <param name="cnt">客户端</param>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.Remove(System.String)">
 <summary>
 删除一个客户端
 </summary>
 <param name="sKey"></param>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1._RemoveClient(`0)">
 <summary>
 客户端被删除后的后续处理
 </summary>
 <param name="oClient"></param>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.Release">
 <summary>
 释放资源
 </summary>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1._Release">
 <summary>
 资源释放
 </summary>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.Run">
 <summary>
 任务处理器，再此检查各通道的状态
 </summary>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManage`1.ClientRun(`0)">
 <summary>
 执行客户端的逻辑
 </summary>
 <param name="tsk"></param>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManageFactory`1.#ctor(DotNetty.Transport.Channels.IEventLoopGroup)">
 <summary>
 初始化任务管理器工厂
 </summary>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManageFactory`1.IniManage(DotNetty.Transport.Channels.IEventLoopGroup)">
 <summary>
 初始化任务管理器工厂
 </summary>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManageFactory`1.GetNewTaskManage(DotNetty.Transport.Channels.IEventLoop)">
 <summary>
 创建一个通道管理器
 </summary>
 <param name="elp"></param>
 <returns></returns>
</member>
<member name="F:DoNetDrive.Core.TaskManage.AbstractTaskManageFactory`1.mConnectorCreateCount">
 <summary>
 已创建的通道数
 </summary>
</member>
<member name="M:DoNetDrive.Core.TaskManage.AbstractTaskManageFactory`1.GetManager">
 <summary>
 返回一个管理者
 </summary>
 <returns></returns>
</member>
<member name="T:DoNetDrive.Core.TaskManage.ITaskClient">
 <summary>
 表示一个任务客户端，包含一组自维护逻辑
 </summary>
</member>
<member name="M:DoNetDrive.Core.TaskManage.ITaskClient.GetKey">
 <summary>
 获取一个用来标识客户端的Key字符串
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.TaskManage.ITaskClient.IsActivity">
 <summary>
 通道是否为活动状态(已连接)
 </summary>
 <returns></returns>
</member>
<member name="M:DoNetDrive.Core.TaskManage.ITaskClient.GetEventLoop">
 <summary>
 获取此通道所依附的事件循环通道
 </summary>
 <returns></returns>
</member>
<member name="E:DoNetDrive.Core.TaskManage.ITaskClient.TaskCloseEvent">
 <summary>
 任务关闭事件
 </summary>
 <param name="client"></param>
</member>
</members>
</doc>
